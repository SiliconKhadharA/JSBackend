@page "/courses"
@using Infrastructure.Models
@using System.Text.Json
@attribute [StreamRendering]




<PageTitle>Courses</PageTitle>

<JSBackend.Components.Sections.CoursesLinks />
<JSBackend.Components.Sections.CoursesSearchFilters />

<section class="courses">
	<div class="container">
		<div class="course-content">
			@if (courses == null) 
			{
				<p><em>No courses found yet. Loading.....</em></p>
			}
			else 
			{
				@foreach (var item in courses)
				{
					<div class="course" data-category="@((item.Category == null || item.Category == "") ? "other" : item.Category)">

						@if (item.IsBestseller)
						{
							<div class="best-seller">Best Seller</div>
						}
						<img class="course-image" src="/Images/Courses/@item.ImageUri" />
						<div class="content">
							<NavLink href=@($"/courses/{item.Id}")>
								<h2 class="course-title">@item.Title</h2>
							</NavLink>
							<div class="course-author">by @item.Author</div>
							<div class="course-price">
								@if (@item.DiscountPrice > 0)
								{
									<div class="dicount-price">$@item.DiscountPrice</div>
									<div class="original-price discounted">$@item.OriginalPrice</div>
								}
								else
								{
									<div class="original-price">@($"{item.OriginalPrice}")</div>
								}

							</div>
							<div class="course-footer">
								<div class="course-hourse"><i class="fa-regular fa-clock"></i> @item.Hours hours</div>
								<div class="course-likes">
									<i class="fa-regular fa-thumbs-up"></i>
									<span>@($"{item.LikesInProcent }")</span>
									<span>@($"({(item.LikesInNumbers ):0.0})")</span>

								</div>
							</div>
						</div>
					</div>
				}
			}
		</div>
	</div>
</section>

<JSBackend.Components.Sections.CoursesAd />

@code {
	private List<CourseModel>? courses;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var query = new GraphQLQuery { Query = "{getCourses { id isBestseller categories title authors{name} imageUri prices{price currency discount} likes likesInProcent hours } }" };
			var response = await Http.PostAsJsonAsync("http://localhost:7186/api/graphql", query);

			if (response.IsSuccessStatusCode)
			{
				var jsonResponse = await response.Content.ReadAsStringAsync();
				Console.WriteLine($"GraphQL Response: {jsonResponse}");
				var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
				if (result?.Data.ValueKind == JsonValueKind.Object && result.Data.TryGetProperty("getCourses", out JsonElement coursesElement))
				{
					courses = coursesElement.EnumerateArray()
						.Select(course => new CourseModel
							{
								Id = course.GetProperty("id").GetString(),
								IsBestseller = course.GetProperty("isBestseller").GetBoolean(),
								ImageUri = course.GetProperty("imageUri").GetString(),
								Title = course.GetProperty("title").GetString(),
								Author = course.GetProperty("authors")[0].GetProperty("name").GetString(),
								OriginalPrice = course.GetProperty("prices").GetProperty("price").GetDecimal(),
								DiscountPrice = course.GetProperty("prices").GetProperty("discount").GetDecimal(),
								Hours = course.GetProperty("hours").GetInt32(),
								LikesInNumbers = course.GetProperty("likes").GetString(),
								LikesInProcent = course.GetProperty("likesInProcent").GetString(),
								Category = course.TryGetProperty("categories", out JsonElement categoriesElement) && categoriesElement.ValueKind == JsonValueKind.Array && categoriesElement.GetArrayLength() > 0
									? categoriesElement[0].GetString()
									: "Other"
							}).ToList();
				}
			}
		}
		catch (Exception ex)
		{
			
			Console.WriteLine($"An error occurred: {ex.Message}");
		}
	}

	
}

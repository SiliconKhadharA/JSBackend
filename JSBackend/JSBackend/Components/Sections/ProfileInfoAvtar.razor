@using Infrastructure.Entites
@inject UserManager<UserEntity> UserManager
@inject SignInManager<UserEntity> SignInManager
@inject IHttpContextAccessor HttpContextAccessor
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@attribute [StreamRendering]



@if (user == null)
{
    <p>Loading....</p>
}
else
{
    <div class="profile-info">
        <img src="/Images/avatar.jpg" alt="Profile Image" class="profile-img" />
        <EditForm enctype="multipart/form-data" Model="@user" OnSubmit="HandleProfileUpload" FormName="ProfileUpload" novalidate>
            <InputFile type="file" name="file" accept="image/*" OnChange="OnInputFileChange"  hidden/>
            <label type="submit" class="btn-refresh"><i class="fa-regular fa-refresh"></i></label>
           
        </EditForm>
        <h5>@($"{user.FirstName} {user.LastName}")</h5>
        <p>@user.Email</p>
    </div>
}



@code {
    [Parameter]
    public UserEntity user { get; set; } = default!;
    private IBrowserFile? selectedFile;

 

   
    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        await JSRuntime.InvokeVoidAsync("submitForm", "ProfileUploadForm");
    }

    public async Task HandleProfileUpload()
    {
        if (selectedFile != null && user != null)
        {
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10)); // Limit to 10 MB
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);

            content.Add(fileContent, "file", selectedFile.Name);

            var response = await Http.PostAsync(Environment.GetEnvironmentVariable("UPLOAD_APIURI"), content);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<ResponseData>();
                if (responseData != null && !string.IsNullOrEmpty(responseData.FileUrl))
                {
                    user.ProfileImage = responseData.FileUrl;
                    var result = await UserManager.UpdateAsync(user);
                    if (result.Succeeded)
                    {
                        await SignInManager.RefreshSignInAsync(user);
                        StateHasChanged();
                    }
                }
            }
        }
    }

    private class ResponseData
    {
        public string? FileUrl { get; set; }
    }
}
